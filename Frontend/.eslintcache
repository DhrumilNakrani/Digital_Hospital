[{"D:\\Project Work\\Frontend\\src\\index.js":"1","D:\\Project Work\\Frontend\\src\\App.js":"2","D:\\Project Work\\Frontend\\src\\pages\\HomePage.js":"3","D:\\Project Work\\Frontend\\src\\components\\Layout\\Layout.js":"4","D:\\Project Work\\Frontend\\src\\components\\Profile\\UserProfile.js":"5","D:\\Project Work\\Frontend\\src\\components\\StartingPage\\StartingPageContent.js":"6","D:\\Project Work\\Frontend\\src\\components\\Profile\\ProfileForm.js":"7","D:\\Project Work\\Frontend\\src\\components\\Layout\\MainNavigation.js":"8","D:\\Project Work\\Frontend\\src\\components\\UI\\Slider.js":"9","D:\\Project Work\\Frontend\\src\\components\\UI\\DataSlider.js":"10","D:\\Project Work\\Frontend\\src\\store\\auth-context.js":"11","D:\\Project Work\\Frontend\\src\\pages\\AdminPage.js":"12","D:\\Project Work\\Frontend\\src\\components\\Auth\\AdminForm.js":"13","D:\\Project Work\\Frontend\\src\\pages\\DoctorPage.js":"14","D:\\Project Work\\Frontend\\src\\pages\\PatientPage.js":"15","D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js":"16","D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js":"17","D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminHomePage.js":"18","D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js":"19","D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminManageStaffPage.js":"20","D:\\Project Work\\Frontend\\src\\components\\Auth\\DoctorForm.js":"21","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminManageDoctorForm.js":"22","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js":"23","D:\\Project Work\\Frontend\\src\\components\\Auth\\PatientForm.js":"24","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminManageStaffForm.js":"25","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminHomePageForm.js":"26","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js":"27"},{"size":345,"mtime":1643391756208,"results":"28","hashOfConfig":"29"},{"size":1709,"mtime":1643641525053,"results":"30","hashOfConfig":"29"},{"size":253,"mtime":1643642043035,"results":"31","hashOfConfig":"29"},{"size":246,"mtime":1643197490816,"results":"32","hashOfConfig":"29"},{"size":278,"mtime":1620031994000,"results":"33","hashOfConfig":"29"},{"size":269,"mtime":1643642440540,"results":"34","hashOfConfig":"29"},{"size":429,"mtime":1620031994000,"results":"35","hashOfConfig":"29"},{"size":1634,"mtime":1643642332561,"results":"36","hashOfConfig":"29"},{"size":1182,"mtime":1643302157141,"results":"37","hashOfConfig":"29"},{"size":2322,"mtime":1643302088591,"results":"38","hashOfConfig":"29"},{"size":719,"mtime":1643392031470,"results":"39","hashOfConfig":"29"},{"size":223,"mtime":1643633735242,"results":"40","hashOfConfig":"29"},{"size":6590,"mtime":1643819499205,"results":"41","hashOfConfig":"29"},{"size":239,"mtime":1643641443412,"results":"42","hashOfConfig":"29"},{"size":244,"mtime":1643641457877,"results":"43","hashOfConfig":"29"},{"size":254,"mtime":1643633493194,"results":"44","hashOfConfig":"29"},{"size":254,"mtime":1643633611862,"results":"45","hashOfConfig":"29"},{"size":281,"mtime":1643633587583,"results":"46","hashOfConfig":"29"},{"size":250,"mtime":1643633517497,"results":"47","hashOfConfig":"29"},{"size":247,"mtime":1643633634697,"results":"48","hashOfConfig":"29"},{"size":6630,"mtime":1643819521243,"results":"49","hashOfConfig":"29"},{"size":14128,"mtime":1643694817403,"results":"50","hashOfConfig":"29"},{"size":3157,"mtime":1643819479723,"results":"51","hashOfConfig":"29"},{"size":14164,"mtime":1643819518661,"results":"52","hashOfConfig":"29"},{"size":12664,"mtime":1643694295946,"results":"53","hashOfConfig":"29"},{"size":649,"mtime":1643632776945,"results":"54","hashOfConfig":"29"},{"size":3068,"mtime":1643819466906,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"cnbsz4",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Project Work\\Frontend\\src\\index.js",[],["114","115"],"D:\\Project Work\\Frontend\\src\\App.js",[],"D:\\Project Work\\Frontend\\src\\pages\\HomePage.js",[],"D:\\Project Work\\Frontend\\src\\components\\Layout\\Layout.js",[],"D:\\Project Work\\Frontend\\src\\components\\Profile\\UserProfile.js",[],"D:\\Project Work\\Frontend\\src\\components\\StartingPage\\StartingPageContent.js",[],"D:\\Project Work\\Frontend\\src\\components\\Profile\\ProfileForm.js",[],"D:\\Project Work\\Frontend\\src\\components\\Layout\\MainNavigation.js",[],"D:\\Project Work\\Frontend\\src\\components\\UI\\Slider.js",[],["116","117"],"D:\\Project Work\\Frontend\\src\\components\\UI\\DataSlider.js",[],"D:\\Project Work\\Frontend\\src\\store\\auth-context.js",[],"D:\\Project Work\\Frontend\\src\\pages\\AdminPage.js",[],"D:\\Project Work\\Frontend\\src\\components\\Auth\\AdminForm.js",["118","119","120","121"],"D:\\Project Work\\Frontend\\src\\pages\\DoctorPage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\PatientPage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminDeleteDoctorPage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminManageDoctorPage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminHomePage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminDeleteStaffPage.js",[],"D:\\Project Work\\Frontend\\src\\pages\\Admin\\AdminManageStaffPage.js",[],"D:\\Project Work\\Frontend\\src\\components\\Auth\\DoctorForm.js",["122","123","124","125"],"D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminManageDoctorForm.js",["126","127","128","129","130","131"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AdminManageDoctorForm.module.css\";\r\n\r\nconst AdminManageDoctorForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n\r\n  const [enteredAddress, setEnteredAddress] = useState(\"\");\r\n  const [enteredAddressTouched, setEnteredAddressTouched] = useState(false);\r\n\r\n  const [enteredSpecialization, setEnteredSpecialization] = useState(\"\");\r\n  const [enteredSpecializationTouched, setEnteredSpecializationTouched] =\r\n    useState(false);\r\n\r\n  const [enteredFirstName, setEnteredFirstName] = useState(\"\");\r\n  const [enteredFirstNameTouched, setEnteredFirstNameTouched] = useState(false);\r\n\r\n  const [enteredLastName, setEnteredLastName] = useState(\"\");\r\n  const [enteredLastNameTouched, setEnteredLastNameTouched] = useState(false);\r\n\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [enteredPasswordTouched, setEnteredPasswordTouched] = useState(false);\r\n\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState(\"\");\r\n  const [enteredConfirmPasswordTouched, setEnteredConfirmPasswordTouched] =\r\n    useState(false);\r\n\r\n  const [enteredMobileNumber, setEnteredMobileNumber] = useState(\"\");\r\n  const [enteredMobileNumberTouched, setEnteredMobileNumberTouched] =\r\n    useState(false);\r\n\r\n  const enteredAddressIsValid = enteredAddress.trim() !== \"\";\r\n  const addressInputIsInvalid = !enteredAddressIsValid && enteredAddressTouched;\r\n\r\n  const enteredSpecializationIsValid = enteredSpecialization.trim() !== \"\";\r\n  const specializationInputIsInValid =\r\n    !enteredSpecializationIsValid && enteredSpecializationTouched;\r\n\r\n  const enteredFirstNameIsValid = enteredFirstName.trim() !== \"\";\r\n  const firstNameInputIsInValid =\r\n    !enteredFirstNameIsValid && enteredFirstNameTouched;\r\n\r\n  const enteredLastNameIsValid = enteredLastName.trim() !== \"\";\r\n  const lastNameInputIsInValid =\r\n    !enteredLastNameIsValid && enteredLastNameTouched;\r\n\r\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\";\r\n  const emailInputIsInValid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  const enteredPasswordIsValid = enteredPassword.trim() !== \"\";\r\n  const passwordInputIsInValid =\r\n    !enteredPasswordIsValid && enteredPasswordTouched;\r\n\r\n  const enteredConfirmPasswordIsValid = enteredConfirmPassword.trim() !== \"\";\r\n  const ConfirmPasswordInputIsInValid =\r\n    !enteredConfirmPasswordIsValid && enteredConfirmPasswordTouched;\r\n\r\n  const enteredMobileNumberIsValid = enteredMobileNumber.trim() !== \"\";\r\n  const mobileNumberInputIsInValid =\r\n    !enteredMobileNumberIsValid && enteredMobileNumberTouched;\r\n\r\n  const addressInputChangeHandler = (event) => {\r\n    setEnteredAddress(event.target.value);\r\n  };\r\n\r\n  const addressInputBlurHandler = () => {\r\n    setEnteredAddressTouched(true);\r\n  };\r\n\r\n  const specializationInputChangeHandler = (event) => {\r\n    setEnteredSpecialization(event.target.value);\r\n  };\r\n\r\n  const specializationInputBlurHandler = () => {\r\n    setEnteredSpecializationTouched(true);\r\n  };\r\n  const firstNameInputChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const firstNameInputBlurHandler = (event) => {\r\n    setEnteredFirstNameTouched(true);\r\n  };\r\n\r\n  const lastNameInputChangeHandler = (event) => {\r\n    setEnteredLastName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const lastNameInputBlurHandler = (event) => {\r\n    setEnteredLastNameTouched(true);\r\n  };\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const emailInputBlurHandler = (event) => {\r\n    setEnteredEmailTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandler = (event) => {\r\n    setEnteredPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const passwordInputBlurHandler = (event) => {\r\n    setEnteredPasswordTouched(true);\r\n  };\r\n\r\n  const confirmPasswordInputChangeHandler = (event) => {\r\n    setEnteredConfirmPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const confirmPasswordInputBlurHandler = (event) => {\r\n    setEnteredConfirmPasswordTouched(true);\r\n  };\r\n\r\n  const mobileNumberInputChangeHandler = (event) => {\r\n    setEnteredMobileNumber(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const mobileNumberInputBlurHandler = (event) => {\r\n    setEnteredMobileNumberTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (\r\n    enteredEmailIsValid &&\r\n    enteredFirstNameIsValid &&\r\n    enteredLastNameIsValid &&\r\n    enteredPasswordIsValid &&\r\n    enteredConfirmPasswordIsValid &&\r\n    enteredMobileNumberIsValid\r\n  ) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Doctor Signed Up Successfully\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.html}>\r\n      <section className={classes.auth}>\r\n        <h1>Add New Doctor</h1>\r\n\r\n        <form onSubmit={formSubmitHandler}>\r\n          {!isLogin && (\r\n            <div>\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"text\">First Name</label>\r\n                <input \r\n                  type=\"text\"\r\n                  id=\"fname\"\r\n                  placeholder=\"First Name\"\r\n                  required\r\n                  onChange={firstNameInputChangeHandler}\r\n                  onBlur={firstNameInputBlurHandler}\r\n                  value={enteredFirstName}\r\n                />\r\n                {firstNameInputIsInValid && (\r\n                  <h6>First Name must not be empty</h6>\r\n                )}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"text\">Last Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"lname\"\r\n                  placeholder=\"Last Name\"\r\n                  required\r\n                  onChange={lastNameInputChangeHandler}\r\n                  onBlur={lastNameInputBlurHandler}\r\n                  value={enteredLastName}\r\n                />\r\n                {lastNameInputIsInValid && <h6>Last Name must not be empty</h6>}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"abc@gmail.com\"\r\n                  id=\"email\"\r\n                  required\r\n                  onChange={emailInputChangeHandler}\r\n                  onBlur={emailInputBlurHandler}\r\n                  value={enteredEmail}\r\n                />\r\n                {emailInputIsInValid && <h6>Email must not be empty</h6>}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"text\">Mobile Number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"number\"\r\n                  placeholder=\"10 digit mobile number\"\r\n                  pattern=\"[0-9]{10}\"\r\n                  required\r\n                  onChange={mobileNumberInputChangeHandler}\r\n                  onBlur={mobileNumberInputBlurHandler}\r\n                  value={enteredMobileNumber}\r\n                />\r\n                {mobileNumberInputIsInValid && (\r\n                  <h6>Mobile Number must not be empty</h6>\r\n                )}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"text\">Address</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"address\"\r\n                  placeholder=\"Address\"\r\n                  required\r\n                  onChange={addressInputChangeHandler}\r\n                  onBlur={addressInputBlurHandler}\r\n                  value={enteredAddress}\r\n                />\r\n                {addressInputIsInvalid && <h6>Address must not be empty</h6>}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"text\">Specialization</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"specialization\"\r\n                  placeholder=\"Specialization\"\r\n                  required\r\n                  onChange={specializationInputChangeHandler}\r\n                  onBlur={specializationInputBlurHandler}\r\n                  value={enteredSpecialization}\r\n                />\r\n                {specializationInputIsInValid && (\r\n                  <h6>Specialization must not be empty</h6>\r\n                )}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  required\r\n                  minLength=\"6\"\r\n                  onChange={passwordInputChangeHandler}\r\n                  onBlur={passwordInputBlurHandler}\r\n                  value={enteredPassword}\r\n                />\r\n                {passwordInputIsInValid && <h6>Password must not be empty</h6>}\r\n              </div>\r\n\r\n              <div className={classes.control}>\r\n                <label htmlFor=\"password\">Confirm Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  id=\"cpassword\"\r\n                  placeholder=\"Confirm Password\"\r\n                  required\r\n                  minLength=\"6\"\r\n                  onChange={confirmPasswordInputChangeHandler}\r\n                  onBlur={confirmPasswordInputBlurHandler}\r\n                  value={enteredConfirmPassword}\r\n                />\r\n                {ConfirmPasswordInputIsInValid && (\r\n                  <h6>Confirm Password must not be empty</h6>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.actions}>\r\n            {!isLoading && <button disabled={!formIsValid}>Create Account</button>}\r\n            {isLoading && (\r\n              <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n            )}\r\n            {isLogin && isInValidCredentials && (\r\n              <h6>Invalid credentials, could not log you in.</h6>\r\n            )}\r\n            {!isLogin && isExsistingUser && (\r\n              <h6>User exists already, please login instead.</h6>\r\n            )}\r\n            {!isLogin && isPasswordValid && (\r\n              <h6>Password and Confirm Password must be same.</h6>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminManageDoctorForm;","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminDeleteDoctorForm.js",["132"],"D:\\Project Work\\Frontend\\src\\components\\Auth\\PatientForm.js",[],"D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminManageStaffForm.js",["133","134","135","136","137","138"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./AdminManageStaffForm.module.css\";\r\n\r\nconst AdminManageStaffForm = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInValidCredentials, setIsInValidCredentials] = useState(false);\r\n  const [isExsistingUser, setIsExsistingUser] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n\r\n  const [enteredAddress, setEnteredAddress] = useState(\"\");\r\n  const [enteredAddressTouched, setEnteredAddressTouched] = useState(false);\r\n\r\n  const [enteredFirstName, setEnteredFirstName] = useState(\"\");\r\n  const [enteredFirstNameTouched, setEnteredFirstNameTouched] = useState(false);\r\n\r\n  const [enteredLastName, setEnteredLastName] = useState(\"\");\r\n  const [enteredLastNameTouched, setEnteredLastNameTouched] = useState(false);\r\n\r\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\r\n  const [enteredPasswordTouched, setEnteredPasswordTouched] = useState(false);\r\n\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState(\"\");\r\n  const [enteredConfirmPasswordTouched, setEnteredConfirmPasswordTouched] =\r\n    useState(false);\r\n\r\n  const [enteredMobileNumber, setEnteredMobileNumber] = useState(\"\");\r\n  const [enteredMobileNumberTouched, setEnteredMobileNumberTouched] =\r\n    useState(false);\r\n\r\n  const enteredAddressIsValid = enteredAddress.trim() !== \"\";\r\n  const addressInputIsInvalid = !enteredAddressIsValid && enteredAddressTouched;\r\n\r\n  const enteredFirstNameIsValid = enteredFirstName.trim() !== \"\";\r\n  const firstNameInputIsInValid =\r\n    !enteredFirstNameIsValid && enteredFirstNameTouched;\r\n\r\n  const enteredLastNameIsValid = enteredLastName.trim() !== \"\";\r\n  const lastNameInputIsInValid =\r\n    !enteredLastNameIsValid && enteredLastNameTouched;\r\n\r\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\";\r\n  const emailInputIsInValid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  const enteredPasswordIsValid = enteredPassword.trim() !== \"\";\r\n  const passwordInputIsInValid =\r\n    !enteredPasswordIsValid && enteredPasswordTouched;\r\n\r\n  const enteredConfirmPasswordIsValid = enteredConfirmPassword.trim() !== \"\";\r\n  const ConfirmPasswordInputIsInValid =\r\n    !enteredConfirmPasswordIsValid && enteredConfirmPasswordTouched;\r\n\r\n  const enteredMobileNumberIsValid = enteredMobileNumber.trim() !== \"\";\r\n  const mobileNumberInputIsInValid =\r\n    !enteredMobileNumberIsValid && enteredMobileNumberTouched;\r\n\r\n  const addressInputChangeHandler = (event) => {\r\n    setEnteredAddress(event.target.value);\r\n  };\r\n\r\n  const addressInputBlurHandler = () => {\r\n    setEnteredAddressTouched(true);\r\n  };\r\n  \r\n  const firstNameInputChangeHandler = (event) => {\r\n    setEnteredFirstName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const firstNameInputBlurHandler = (event) => {\r\n    setEnteredFirstNameTouched(true);\r\n  };\r\n\r\n  const lastNameInputChangeHandler = (event) => {\r\n    setEnteredLastName(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const lastNameInputBlurHandler = (event) => {\r\n    setEnteredLastNameTouched(true);\r\n  };\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const emailInputBlurHandler = (event) => {\r\n    setEnteredEmailTouched(true);\r\n  };\r\n\r\n  const passwordInputChangeHandler = (event) => {\r\n    setEnteredPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const passwordInputBlurHandler = (event) => {\r\n    setEnteredPasswordTouched(true);\r\n  };\r\n\r\n  const confirmPasswordInputChangeHandler = (event) => {\r\n    setEnteredConfirmPassword(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const confirmPasswordInputBlurHandler = (event) => {\r\n    setEnteredConfirmPasswordTouched(true);\r\n  };\r\n\r\n  const mobileNumberInputChangeHandler = (event) => {\r\n    setEnteredMobileNumber(event.target.value);\r\n    setIsExsistingUser(false);\r\n  };\r\n\r\n  const mobileNumberInputBlurHandler = (event) => {\r\n    setEnteredMobileNumberTouched(true);\r\n  };\r\n\r\n  let formIsValid = false;\r\n  if (\r\n    enteredEmailIsValid &&\r\n    enteredFirstNameIsValid &&\r\n    enteredLastNameIsValid &&\r\n    enteredPasswordIsValid &&\r\n    enteredConfirmPasswordIsValid &&\r\n    enteredMobileNumberIsValid\r\n  ) {\r\n    formIsValid = true;\r\n  }\r\n  const formSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Staff Signed Up Successfully\");\r\n    // if (isLogin) {\r\n    //   setIsLoading(true);\r\n\r\n    //   try {\r\n    //     const response = await fetch(\"http://localhost:5000/login\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         email: enteredEmailLogin,\r\n    //         password: enteredPasswordLogin,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (responseData.status === \"201\") {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else {\r\n    //       setIsInValidCredentials(true);\r\n    //       setEnteredEmailLogin(\"\");\r\n    //       setEnteredPasswordLogin(\"\");\r\n\r\n    //       setEnteredEmailLoginTouched(false);\r\n    //       setEnteredPasswordLoginTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   try {\r\n    //     setIsLoading(true);\r\n\r\n    //     const response = await fetch(\"http://localhost:5000/signup\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify({\r\n    //         firstName: enteredFirstName,\r\n    //         lastName: enteredLastName,\r\n    //         email: enteredEmail,\r\n    //         mobileNumber: enteredMobileNumber,\r\n    //         password: enteredPassword,\r\n    //         confirmPassword: enteredConfirmPassword,\r\n    //       }),\r\n    //     });\r\n\r\n    //     const responseData = await response.json();\r\n    //     setIsLoading(false);\r\n\r\n    //     if (\r\n    //       responseData.status !== \"422\" &&\r\n    //       enteredPassword === enteredConfirmPassword\r\n    //     ) {\r\n    //       authCtx.login(responseData.token);\r\n    //       history.replace(\"/\");\r\n    //       console.log(responseData.message);\r\n    //     } else if (enteredPassword !== enteredConfirmPassword) {\r\n    //       setIsPasswordValid(true);\r\n    //     } else {\r\n    //       setIsExsistingUser(true);\r\n    //       setEnteredEmail(\"\");\r\n    //       setEnteredFirstName(\"\");\r\n    //       setEnteredLastName(\"\");\r\n    //       setEnteredMobileNumber(\"\");\r\n    //       setEnteredPassword(\"\");\r\n    //       setEnteredConfirmPassword(\"\");\r\n\r\n    //       setEnteredConfirmPasswordTouched(false);\r\n    //       setEnteredPasswordTouched(false);\r\n    //       setEnteredEmailTouched(false);\r\n    //       setEnteredFirstNameTouched(false);\r\n    //       setEnteredLastNameTouched(false);\r\n    //       setEnteredMobileNumberTouched(false);\r\n    //       console.log(responseData.message);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={classes.html}>\r\n    <section className={classes.auth}>\r\n      <h1>Add New Staff</h1>\r\n\r\n      <form onSubmit={formSubmitHandler}>\r\n        {!isLogin && (\r\n          <div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">First Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"fname\"\r\n                placeholder=\"First Name\"\r\n                required\r\n                onChange={firstNameInputChangeHandler}\r\n                onBlur={firstNameInputBlurHandler}\r\n                value={enteredFirstName}\r\n              />\r\n              {firstNameInputIsInValid && <h6>First Name must not be empty</h6>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Last Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"lname\"\r\n                placeholder=\"Last Name\"\r\n                required\r\n                onChange={lastNameInputChangeHandler}\r\n                onBlur={lastNameInputBlurHandler}\r\n                value={enteredLastName}\r\n              />\r\n              {lastNameInputIsInValid && <h6>Last Name must not be empty</h6>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"abc@gmail.com\"\r\n                id=\"email\"\r\n                required\r\n                onChange={emailInputChangeHandler}\r\n                onBlur={emailInputBlurHandler}\r\n                value={enteredEmail}\r\n              />\r\n              {emailInputIsInValid && <h6>Email must not be empty</h6>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Mobile Number</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"number\"\r\n                placeholder=\"10 digit mobile number\"\r\n                pattern=\"[0-9]{10}\"\r\n                required\r\n                onChange={mobileNumberInputChangeHandler}\r\n                onBlur={mobileNumberInputBlurHandler}\r\n                value={enteredMobileNumber}\r\n              />\r\n              {mobileNumberInputIsInValid && (\r\n                <h6>Mobile Number must not be empty</h6>\r\n              )}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"text\">Address</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"address\"\r\n                placeholder=\"Address\"\r\n                required\r\n                onChange={addressInputChangeHandler}\r\n                onBlur={addressInputBlurHandler}\r\n                value={enteredAddress}\r\n              />\r\n              {addressInputIsInvalid && <h6>Address must not be empty</h6>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                minLength=\"6\"\r\n                onChange={passwordInputChangeHandler}\r\n                onBlur={passwordInputBlurHandler}\r\n                value={enteredPassword}\r\n              />\r\n              {passwordInputIsInValid && <h6>Password must not be empty</h6>}\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"password\">Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"cpassword\"\r\n                placeholder=\"Confirm Password\"\r\n                required\r\n                minLength=\"6\"\r\n                onChange={confirmPasswordInputChangeHandler}\r\n                onBlur={confirmPasswordInputBlurHandler}\r\n                value={enteredConfirmPassword}\r\n              />\r\n              {ConfirmPasswordInputIsInValid && (\r\n                <h6>Confirm Password must not be empty</h6>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && (\r\n            <button disabled={!formIsValid}>Create Account</button>\r\n          )}\r\n          {isLoading && (\r\n            <RingLoader color=\"white\" height={80} width={80}></RingLoader>\r\n          )}\r\n          {isLogin && isInValidCredentials && (\r\n            <h6>Invalid credentials, could not log you in.</h6>\r\n          )}\r\n          {!isLogin && isExsistingUser && (\r\n            <h6>User exists already, please login instead.</h6>\r\n          )}\r\n          {!isLogin && isPasswordValid && (\r\n            <h6>Password and Confirm Password must be same.</h6>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminManageStaffForm;","D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminHomePageForm.js",[],"D:\\Project Work\\Frontend\\src\\components\\Admin\\AdminDeleteStaffForm.js",["139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":27,"nodeType":"148","messageId":"149","endLine":1,"endColumn":37},{"ruleId":"146","severity":1,"message":"150","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"146","severity":1,"message":"151","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":29},{"ruleId":"146","severity":1,"message":"152","line":12,"column":21,"nodeType":"148","messageId":"149","endLine":12,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":1,"column":20,"nodeType":"148","messageId":"149","endLine":1,"endColumn":30},{"ruleId":"146","severity":1,"message":"150","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"146","severity":1,"message":"151","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":29},{"ruleId":"146","severity":1,"message":"152","line":12,"column":21,"nodeType":"148","messageId":"149","endLine":12,"endColumn":33},{"ruleId":"146","severity":1,"message":"153","line":8,"column":9,"nodeType":"148","messageId":"149","endLine":8,"endColumn":16},{"ruleId":"146","severity":1,"message":"154","line":9,"column":9,"nodeType":"148","messageId":"149","endLine":9,"endColumn":16},{"ruleId":"146","severity":1,"message":"151","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":29},{"ruleId":"146","severity":1,"message":"152","line":12,"column":21,"nodeType":"148","messageId":"149","endLine":12,"endColumn":33},{"ruleId":"146","severity":1,"message":"155","line":13,"column":32,"nodeType":"148","messageId":"149","endLine":13,"endColumn":55},{"ruleId":"146","severity":1,"message":"156","line":15,"column":27,"nodeType":"148","messageId":"149","endLine":15,"endColumn":45},{"ruleId":"146","severity":1,"message":"153","line":8,"column":9,"nodeType":"148","messageId":"149","endLine":8,"endColumn":16},{"ruleId":"146","severity":1,"message":"153","line":8,"column":9,"nodeType":"148","messageId":"149","endLine":8,"endColumn":16},{"ruleId":"146","severity":1,"message":"154","line":9,"column":9,"nodeType":"148","messageId":"149","endLine":9,"endColumn":16},{"ruleId":"146","severity":1,"message":"151","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":29},{"ruleId":"146","severity":1,"message":"152","line":12,"column":21,"nodeType":"148","messageId":"149","endLine":12,"endColumn":33},{"ruleId":"146","severity":1,"message":"155","line":13,"column":32,"nodeType":"148","messageId":"149","endLine":13,"endColumn":55},{"ruleId":"146","severity":1,"message":"156","line":15,"column":27,"nodeType":"148","messageId":"149","endLine":15,"endColumn":45},{"ruleId":"146","severity":1,"message":"153","line":8,"column":9,"nodeType":"148","messageId":"149","endLine":8,"endColumn":16},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],["157"],["158"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","'setIsLogin' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'authCtx' is assigned a value but never used.","'history' is assigned a value but never used.","'setIsInValidCredentials' is assigned a value but never used.","'setIsPasswordValid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]